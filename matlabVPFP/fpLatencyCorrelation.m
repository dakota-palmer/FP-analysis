%% first load subjDataAnalyzed struct generated by fpAnalyzeData.m

load(uigetfile('*.mat')); %choose the subjDataAnalyzed file to open for your experiment %only show .mat files

subjects= fieldnames(subjDataAnalyzed);

%% Correlation between peri-cue Z score and PE latency

%If we want to relate Z scored fluorescence with PE latency, one way to do
%it would be to pool the Z score values for an individual timestamp
%(across all trials) and correlate them with the PE latency on that trial.
%Then, run a correlation between these Z scores and PE latency. Repeat for
%every timestamp of interest. Result is a beta coefficient for every
%timestamp with PE latency, so we can plot it over time.

for subj= 1:numel(subjects)
    currentSubj=subjDataAnalyzed.(subjects{subj});
    allStages= unique([currentSubj.trainStage]);

    
    timeLock= currentSubj(1).periDS.timeLock;
    
    includedSessions= []; %reset between subjects

    for thisStage= allStages

        %loop through all sessions and record index of sessions that correspond only to this stage
        for session= 1:numel(currentSubj)
            if currentSubj(session).trainStage == thisStage %only include sessions from this stage
               includedSessions= [includedSessions, session]; % just cat() this session into the list of sessions to save
            end
        end%end session loop

        trialCount= 1; %for easy indexing, reset between stages

        blueZ= nan(30*numel(includedSessions),numel(timeLock)); %prefill with nan (assumes 30 trials/session)
        peLat= nan(30*numel(includedSessions),numel(timeLock));
        
        for includedSession= includedSessions
            for cue= 1:numel(currentSubj(includedSession).periDS.DS)
                if (currentSubj(includedSession).trialOutcome.DSoutcome(cue)==1) %loop through DS trials with valid PE
                    for timeStamp= 1:numel(timeLock)
                      %assemble a matrix where each column contains z score value
                      %from all trials (rows) of a given timestamp
                      blueZ(trialCount,timeStamp)= currentSubj(includedSession).periDS.DSzblue(timeStamp,1,cue);
                      peLat(trialCount,timeStamp)= currentSubj(includedSession).behavior.poxDSrel{cue}(1); %get only first PE latency
                    end%end timestamp loop
                   trialCount=trialCount+1; %iterate trialCount for indexing
                end %end DS with port entry loop
            end %end all DS loop
        end %end includedSession loop
        
        
        %now run correlation for each timeStamp
        for timeStamp= 1:numel(timeLock)
            [rho(1,timeStamp),pval(1,timeStamp)]= corr(blueZ(:,timeStamp),peLat(:,timeStamp), 'Rows', 'Complete'); %Complete= ignore nan rows
        end
        
        figure; hold on; sgtitle(strcat(subjects{subj},',-Stage-',num2str(thisStage), '-blueZ:PE latency by timestamp'));
        subplot(2,1,1); hold on; title('correlation coeff rho'); plot(timeLock,rho);
        xlabel('time from cue onset');
        
        rhoSig= nan(size(rho));
        rhoSig(pval<=.05)= rho(pval<=.05); %get only values below alpha criteria
        subplot(2,1,2); hold on; title('correlation coeff rho pval<=.05'); plot(timeLock,rhoSig);
        xlabel('time from cue onset');        
        
        linkaxes();
        
    end %end thisStage loop
end %end subj loop



%% Impulse response function

%Should be able to visualize/approximate impulse response function (to cue) by
%excluding all timestamps after port entry & averaging result

%only including trials w PE

for subj= 1:numel(subjects)
    currentSubj=subjDataAnalyzed.(subjects{subj});
    allStages= unique([currentSubj.trainStage]);

    
    timeLock= currentSubj(1).periDS.timeLock;
    

    for thisStage= allStages
        includedSessions= []; %reset between stage

        %loop through all sessions and record index of sessions that correspond only to this stage
        for session= 1:numel(currentSubj)
            if currentSubj(session).trainStage == thisStage %only include sessions from this stage
               includedSessions= [includedSessions, session]; % just cat() this session into the list of sessions to save
            end
        end%end session loop
    
    
        figure; hold on; title(strcat(subjects{subj},',-Stage-',num2str(thisStage), '; estimated impulse response to DS cue'));

        for includedSession= includedSessions  %now loop through all includedSessions of thisStage
           impulseCue= nan(numel(timeLock),numel(currentSubj(includedSession).periDS.DS)); %reset between sessions, prefill with nan
           for cue= 1:numel(currentSubj(includedSession).periDS.trialShift.DSrelShifted)
               if currentSubj(includedSession).trialOutcome.DSoutcome(cue)==1 %only include trial if there was a valid PE during cue
                   tsExcluded= [];

                   tsExcluded= find(timeLock>=currentSubj(includedSession).behavior.poxDSrel{cue}(1));

                   %make excluded timestamps nan
                    %exclude ts after first PE
                   currentSubj(includedSession).periDS.DSzblue(tsExcluded,:,cue)= nan; 

                   impulseCue(:,cue)= currentSubj(includedSession).periDS.DSzblue(:,:,cue);
               end %end exclusion conditional
           end %end DS loop


           if ~isempty(impulseCue) %only run if there are PEtrials in this session (e.g. there may be none on extinction days)
               %visualize
               for trial= 1:size(impulseCue,2)
                   plot(timeLock,impulseCue(:,trial), 'b');
               end
                    %overlay mean
               plot(timeLock,nanmean(impulseCue,2), 'k');
               legend('trial', 'mean')
           end
           
        end %end Stage loop
       
    end%end session loop
end%end subj loop

